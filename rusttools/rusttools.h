#ifndef rusttools_h
#define rusttools_h

/* Generated with cbindgen:0.24.3 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>


namespace sjqrusttools {

/// the type of the dram that used to read and write data
enum class DramType {
  DDR4,
  HBM,
};

enum class IcntType {
  Mesh,
  Ring,
  Ideal,
};

/// The type for the watcher sending to the clase
enum class WatcherToClauseType {
  /// - in this case, the watcher send clause to it's own clause unit
  /// - so the clause should use icnt to send memory request
  Streight,
  /// - in this case, the watcher send clause to dedicate clause unit
  /// - so the clause should direct to send memory request
  Icnt,
};

/// the config for satacc
///
struct Config {
  WatcherToClauseType watcher_to_clause_type;
  size_t n_watchers;
  size_t n_clauses;
  size_t mems;
  IcntType icnt;
  bool seq;
  bool ideal_memory;
  bool ideal_l3cache;
  size_t multi_port;
  DramType dram_config;
  IcntType watcher_to_clause_icnt;
  IcntType watcher_to_writer_icnt;
  size_t num_writer_entry;
  size_t num_writer_merge;
  bool single_watcher;
  size_t private_cache_size;
  size_t l3_cache_size;
};

struct Point {
  int32_t x;
  int32_t y;
};

struct Rec {
  int32_t x;
  int32_t y;
};


extern "C" {

Config config_from_file(const char *path);

int32_t get_x(const Point *self);

int32_t get_y(const Point *self);

void say_hello(const Point *point, const Rec *rect);

void set_x(Point *self, int32_t x);

void set_y(Point *self, int32_t y);

void show_config(const Config *self);

} // extern "C"

} // namespace sjqrusttools

#endif // rusttools_h
